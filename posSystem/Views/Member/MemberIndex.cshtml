@model MemberResponseModel

@{
    ViewData["Title"] = "Member Management";
    int count = 0;
    int _pageNo = Model.pageNo;
    int _pageCount = Model.pageCount;
    int _pageSize = Model.pageSize;
    string _sortField = Model.sortField ?? "memberName";
    string _sortOrder = Model.sortOrder ?? "asc";

    string _pageURL(int _pageNo, string _sortField, string _sortOrder)
    {
        return $"/Member/Index?pageNo={_pageNo}&pageSize={_pageSize}&sortField={_sortField}&sortOrder={_sortOrder}";
    }
}

<div class="d-flex flex-column flex-sm-row align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-4 mb-sm-0">Member Management</h1>
    <div>
        <a href="/Member/Create" class="btn btn-success mr-2">
            <i class="fas fa-plus-circle"></i> Add Member
        </a>
        <button type="button" id="btnDeleteAll" class="btn btn-danger">
            <i class="fas fa-trash-alt"></i> Delete All Members
        </button>
    </div>
</div>

<table class="table table-hover">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">
                <a href="@_pageURL(_pageNo, "memberName", _sortOrder == "asc" ? "desc" : "asc")">
                    Member Name @(_sortField == "memberName" ? (_sortOrder == "asc" ? "▲" : "▼") : "")
                </a>
            </th>
            <th scope="col">Member Code</th>
            <th scope="col">Email</th>
            <th scope="col">Phone</th>
            <th scope="col">Address</th>
            <th scope="col">Points</th>
            <th scope="col">Used Points</th>
            <th scope="col">Create Date</th>
            <th scope="col">Update Date</th>
            <th scope="col">Update Count</th>
            <th scope="col">Photo</th>
            <th scope="col">Action</th>
        </tr>
    </thead>

    <tbody>
        @foreach (MemberModel item in Model.memberData)
        {
            <tr>
                <th scope="row">@(++count + (_pageNo - 1) * _pageSize)</th>
                <td>@item.memberName</td>
                <td>@item.memberCode</td>
                <td>@item.memberEmail</td>
                <td>@item.memberPhone</td>
                <td>@item.memberAddress</td>
                <td>@item.memberPoints</td>
                <td>@item.memberUsedPoints</td>
                <td>@item.memberCreateAt</td>
                <td>@item.memberUpdateAt</td>
                <td>@item.memberUpdateCount</td>
                <td>
                    @if (!string.IsNullOrEmpty(item.memberPhoto))
                    {
                        <img src="@item.memberPhoto" class="img-thumbnail" style="max-width: 100px;" />
                    }
                    else
                    {
                        <span>No Photo</span>
                    }
                </td>

                <td class="text-center">
                    <!-- Edit Button -->
                    <a href="/Member/Edit/@item.memberId" class="btn btn-warning btn-sm">
                        <i class="fas fa-edit"></i> Edit
                    </a>

                    <!-- Delete Button -->
                    <button type="button" class="btn btn-danger btn-sm btn-delete" data-id="@item.memberId">
                        <i class="fas fa-trash-alt"></i> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>

    <tfoot>
        <tr>
            <td colspan="12">
                <nav aria-label="Pagination">
                    <ul class="pagination justify-content-center">
                        @if (_pageNo == 1)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Previous</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="@_pageURL(_pageNo - 1, _sortField, _sortOrder)">Previous</a>
                            </li>
                        }

                        @if (_pageCount <= 9)
                        {
                            for (int i = 1; i <= _pageCount; i++)
                            {
                                <li class="page-item @(i == _pageNo ? "active" : "")">
                                    <a class="page-link" href="@_pageURL(i, _sortField, _sortOrder)">@i</a>
                                </li>
                            }
                        }
                        else
                        {
                            if (_pageNo <= 3 || _pageCount - 2 <= _pageNo)
                            {
                                for (int i = 1; i <= 4; i++)
                                {
                                    <li class="page-item @(i == _pageNo ? "active" : "")">
                                        <a class="page-link" href="@_pageURL(i, _sortField, _sortOrder)">@i</a>
                                    </li>
                                }
                                <li class="page-item"><a class="page-link">...</a></li>
                                for (int i = _pageCount - 3; i <= _pageCount; i++)
                                {
                                    <li class="page-item @(i == _pageNo ? "active" : "")">
                                        <a class="page-link" href="@_pageURL(i, _sortField, _sortOrder)">@i</a>
                                    </li>
                                }
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@_pageURL(1, _sortField, _sortOrder)">1</a>
                                </li>
                                <li class="page-item"><a class="page-link">...</a></li>
                                for (int i = _pageNo - 2; i <= _pageNo + 2; i++)
                                {
                                    <li class="page-item @(i == _pageNo ? "active" : "")">
                                        <a class="page-link" href="@_pageURL(i, _sortField, _sortOrder)">@i</a>
                                    </li>
                                }
                                <li class="page-item"><a class="page-link">...</a></li>
                                <li class="page-item">
                                    <a class="page-link" href="@_pageURL(_pageCount, _sortField, _sortOrder)">@_pageCount</a>
                                </li>
                            }
                        }

                        @if (_pageNo == _pageCount)
                        {
                            <li class="page-item disabled">
                                <a class="page-link">Next</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item">
                                <a class="page-link" href="@_pageURL(_pageNo + 1, _sortField, _sortOrder)">Next</a>
                            </li>
                        }
                    </ul>
                </nav>
            </td>
        </tr>
    </tfoot>
</table>

@section scripts {
    <script>
        $(document).on('click', '#btnDeleteAll', function () {
            Swal.fire({
                title: "Confirm?",
                text: "Are you sure you want to delete all members? This action cannot be undone.",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete all!"
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteAllMembers();
                }
            });
        });

        // AJAX function to delete all members
        function deleteAllMembers() {
            $.ajax({
                url: "/Member/DeleteAll",
                type: "POST",
                dataType: "json",
                success: function (result) {
                    console.log(result);
                    if (result.IsSuccess) {
                        let timerInterval;
                        Swal.fire({
                            title: "Deleting...",
                            html: "Please wait, deleting in <b></b> milliseconds.",
                            timer: 1000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading();
                                const timer = Swal.getHtmlContainer().querySelector("b");
                                timerInterval = setInterval(() => {
                                    timer.textContent = Swal.getTimerLeft();
                                }, 100);
                            },
                            willClose: () => {
                                clearInterval(timerInterval);
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                Swal.fire({
                                    title: "Deleted!",
                                    text: result.responseMessage,
                                    icon: "success",
                                }).then(() => {
                                    location.reload();
                                });
                            }
                        });
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: result.responeMessage,
                            icon: "error"
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: "Error!",
                        text: "An error occurred while deleting.",
                        icon: "error"
                    });
                }
            });
        }

        // Function to handle delete operation
        $(document).on('click', '.btn-delete', function (event) {
            event.preventDefault();
            let id = $(this).data('id'); // Use data('id') to match data-id attribute
            Swal.fire({
                title: "Confirm?",
                text: "You won't be able to revert this!",
                icon: "question",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    deleteData(id);
                }
            });
        });

        // AJAX function to delete data
        function deleteData(memberId) {
            let _reqModel = {
                memberId: memberId
            };

            $.ajax({
                url: "/Member/Delete/" + memberId,
                data: _reqModel,
                type: "POST",
                dataType: "json",
                success: function (result) {
                    console.log(result);
                    if (result.IsSuccess) {
                        let timerInterval;
                        Swal.fire({
                            title: "Deleting...",
                            html: "Please wait, deleting in <b></b> milliseconds.",
                            timer: 1000,
                            timerProgressBar: true,
                            didOpen: () => {
                                Swal.showLoading();
                                const timer = Swal.getHtmlContainer().querySelector("b");
                                timerInterval = setInterval(() => {
                                    timer.textContent = Swal.getTimerLeft();
                                }, 100);
                            },
                            willClose: () => {
                                clearInterval(timerInterval);
                            }
                        }).then((result) => {
                            if (result.dismiss === Swal.DismissReason.timer) {
                                Swal.fire({
                                    title: "Deleted!",
                                    text: result.responseMessage,
                                    icon: "success",
                                }).then(() => {
                                    location.reload();
                                });
                            }
                        });
                    } else {
                        Swal.fire({
                            title: "Error!",
                            text: result.responeMessage,
                            icon: "error"
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error:', error);
                    Swal.fire({
                        title: "Error!",
                        text: "An error occurred while deleting.",
                        icon: "error"
                    });
                }
            });
        }
    </script>
}
